<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小程序getLocation定位不准]]></title>
    <url>%2F2020%2F04%2F26%2F%E5%B0%8F%E7%A8%8B%E5%BA%8FgetLocation%E5%AE%9A%E4%BD%8D%E4%B8%8D%E5%87%86%2F</url>
    <content type="text"><![CDATA[小程序getLocation定位不准来自官方文档 注意 工具中定位模拟使用IP定位，可能会有一定误差。且工具目前仅支持 gcj02 坐标。 使用第三方服务进行逆地址解析时，请确认第三方服务默认的坐标系，正确进行坐标转换。 ​ 在开发工具里调试会发现地图里显示的是当地政府的地址，就是因为使用IP定位，而在手机端查看会有很大误差，暂时把type改成gcj02并用“真机调试”可以精确定位。]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu安装Docker下载太慢]]></title>
    <url>%2F2020%2F04%2F17%2Fubuntu%E5%AE%89%E8%A3%85Docker%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%2F</url>
    <content type="text"><![CDATA[Ubuntu安装Docker下载太慢跟着菜鸟教程和docker官网的步骤，到 sudo apt-get install docker-ce docker-ce-cli containerd.io 这一步时要访问美国官方的库apt很慢 首先尝试了虚拟机共享主机的SSR，虚拟机设为NAT连接，在物理机上查询虚拟机ip， 1234567以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::9c74:ea9b:8f49:1e96%22 IPv4 地址 . . . . . . . . . . . . : 192.168.199.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : ssr–&gt;选项设置–&gt;本地代理–&gt;勾选允许来自局域网的连接 Ubuntu下设置–&gt;网络–&gt;网络代理 手动，IP填写上面查到的地址，端口1080 实现了ubuntu下的ssr，但apt还是很慢，看到apt要访问的地址如下，在浏览器中访问 获取:1 https://download.docker.com/linux/ubuntu bionic/stable amd64 docker-ce amd64 5:19.03.8~3-0~ubuntu-bionic [22.9 MB] 有意思的是在浏览器中下载deb文件速度很快，不清楚原因，地址如下 https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/ 下载三个软件最新的deb，拖到ubuntu下安装，再apt或者docker -v检查没问题。 第一个命令sudo docker run hello-world 还是访问国外官方源，发现阿里云有“容器镜像服务”，创建一个容器仓库后会给一个镜像加速器地址，按说明配置即可。 运行容器：docker run -it 镜像名 /bin/bash 退出容器：exit 或者 Ctrl+P+Q暂时退出 查看所有容器：docker ps -a 查看运行的容器：docker ps 重启容器：docker restart 容器ID 重启容器后进入交互式：docker start -i 5c6ce895b979 进入容器：docker attach 容器ID ​ docker exec -it 容器ID /bin/bash docker run -p 80 --name web -i -t ubuntu /bin/bash 启动一个docker容器后发现没有vim等编辑器，apt update还是国外源，和平时换源过程一样，不过修改sources.list文件要先删除原来的行，可以删掉重建sources.list文件，再用echo和&gt;&gt;重定向写到文件中，再update就好了。 12345678910deb http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main multiverse restricted universedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main multiverse restricted universe 的击杀敌方拉到回复]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu18.04更换国内源]]></title>
    <url>%2F2020%2F04%2F16%2FUbuntu18.04%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90%2F</url>
    <content type="text"><![CDATA[Ubuntu本身的源使用的是国内的源，下载速度比较慢，不像CentOS一样yum安装的时候对镜像站点进项选择，所以选择了更换成国内的源。以下内容整合自网络 备份/etc/apt/sources.list文件1mv /etc/apt/sources.list /etc/apt/sourses.list.backup1 在root管理员下新建/etc/apt/sources.list文件并添加以下内容apt比apt-get多了一些命令，比如sudo apt edit-sources可以直接打开上述文件 1234567891011#阿里云源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 更改完成之后执行以下命令12# apt update# apt upgrade12 其他的一些apt命令12345678910111213141516sudo apt-get update 更新源sudo apt-get install package 安装包sudo apt-get remove package 删除包sudo apt-cache search package 搜索软件包sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等sudo apt-get install package --reinstall 重新安装包sudo apt-get -f install 修复安装sudo apt-get remove package --purge 删除包，包括配置文件等sudo apt-get build-dep package 安装相关的编译环境sudo apt-get upgrade 更新已安装的包sudo apt-get dist-upgrade 升级系统sudo apt-cache depends package 了解使用该包依赖那些包sudo apt-cache rdepends package 查看该包被哪些包依赖sudo apt-get source package 下载该包的源代码sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包sudo apt-get check 检查是否有损坏的依赖12345678910111213141516 其他几个国内的源：1234567891011121314151617181920212223242526272829303132333435#中科大源deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse#163源deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse1234567891011#清华源deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于BOA搭建及移植web服务器]]></title>
    <url>%2F2020%2F04%2F16%2F%E5%9F%BA%E4%BA%8EBOA%E6%90%AD%E5%BB%BA%E5%92%8C%E7%A7%BB%E6%A4%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[基于BOA搭建及移植web服务器​ 这学期的硬件课设选择了web服务器。在web服务器中，较为常用的是tomcat，nigix。但是这种服务器比较大，占用资源比较多，并不适合于嵌入式设备中。而boa是一个很轻便的web服务器，部署简单，占用资源少，支持多种语言。 一、下载及配置BOA服务器1. 下载安装boa服务器 ubuntu下操作：首先在http://www.boa.org下载BOA服务器的源码：boa-0.94.13.tar.gz版本为0.94.13。 对其进行解压： $ tar xzf boa-0.94.13.tar.gz 还要安装必要的工具bison，flex。否则会出现： 12make: yacc：命令未找到make: *** [y.tab.c] 错误 127。 $ sudo apt-get install bison flex 打开解压出的文件夹 2. 修改相关配置文件修改src/compat.h文件: 打开compat.h找到这一条语句： #define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff 将其修改为： #define TIMEZONE_OFFSET(foo) (foo)-&gt;tm_gmtoff 这是由于本机所使用的交叉编译版本对语句用法的不同。 修改 src/log.c文件。 打开log.c注释掉下列语句： 123/*if (dup2(error_log, STDERR_FILENO) == -1) &#123; DIE("unable to dup2 the error log"); &#125;*/ 否则会出现错误： log.c:73 unable to dup2 the error log:bad file descriptor。 修改src/boa.c文件。 打开src/boa.c注释掉下面两句话： 12345678#if 0 if (passwdbuf == NULL) &#123; DIE(”getpwuid”); &#125; if (initgroups(passwdbuf-&gt;pw_name, passwdbuf-&gt;pw_gid) == -1) &#123; DIE(”initgroups”); &#125;#endif 否则会出现错误： boa.c:211 - getpwuid: No such file or directory。 123456#if 0 if (setuid(0) != -1) &#123; DIE(”icky Linux kernel bug!”); &#125;#endif 否则会出现问题： boa.c:228 - icky Linux kernel bug!: No such file or directory。 3. 生成boa可执行文件进入相关目录生成makefile文件： $ cd boa-0.94.13/src $ ./configure 修改makefile文件。 $vim Makefile 修改CC ＝ gcc 为 CC ＝ arm-linux-gnueabihf-gcc 修改CPP ＝ gcc -E 为 CPP ＝ arm-linux-gnueabihf-gcc -E 接下来进行编译。 $ make 然后为刚刚生成的二进制文件boa瘦身删除其调试信息。 $ arm-linux-gnueabihf-strip boa 4. 修改配置找到配置文件boa.conf并进行如下修改： $ sudo vi boa.conf (1)对Group的修改 将Group nogroup（这是修改程序所属的组）。 修改为 Group 0 (2)对user的修改 将User nobody（这里是修改程序所属的用户）。 修改为 User 0 (3)对ScriptAlias的修改 将ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/ 修改为 ScriptAlias /cgi-bin/ /www/cgi-bin/（这里是配置服务器读取cgi程序的目录，需要在SD卡中同样的位置建立同样的目录）。 (4)对DoucmentRoot的修改 将DoucmentRoot /var/www 修改为DoucmentRoot /www（这里是服务器初始网页放置的位置同样需要在SD卡同样的位置建立同样的文件夹并将名为index.html的网页放置在其中）。 (5)对ServerName的修改 将#ServerName [www.your.org.here](http://www.your.org.here) 修改为 ServerName www.your.org.here 否则会出现错误“gethostbyname::No such file or directory” (6)对AccessLog修改 将AccessLog /var/log/boa/access_log（在SD卡相应位置建立同名文件夹以存放日志文件，否则提示找不到文件夹，这里不用log功能就注释掉）。 修改为#AccessLog /var/log/boa/access_log 否则会出现错误提示：“unable to dup2 the error log: Bad file descriptor” 在目标板(这里使用树莓派)上需要做的配置： 创建目录/etc/boa并且把boa 和 boa.conf拷贝到这个目录下： 先把文件从虚拟机中拖拽到物理机上，再通过vnc viewer的文件传输功能下载到板子上。用户权限无法查看根目录的文件，使用root权限进行下面操作。 $ mkdir /etc/boa $ cp boa.conf /rootfs/etc/boa 创建HTML文档的主目录/www： $ mkdir /www 创建CGI脚本所在的目录 /www/cgi-bin： $ mkdir /www/cgi-bin 这样boa的服务器基础就搭建好了。 二、 测试服务器动态网页功能​ 到此为止服务器已经搭建完成了，接下来就要测试服务器是否能够成功运行动态网页了，为了顺利完成测试，首先要做的是让目标板和主机能够通信。 ​ 用交叉网线连接主机和开发板的配置较复杂，本地连接要使主机和开发板在同一网段下。折腾失败过一次没再研究。这里使用笔记本和树莓派wifi连在同一路由器下可直接连通，用手机热点效果一样，ping路由器后台查到的ip即可。ping通就可以通信了 接下来要做的就是编译一个cgi程序，因为只是测试用所以就用最简单的hello world来测试： 首先编写hello world代码： 123456789101112#include&lt;stdio.h&gt; int main(int argc, char** argv) &#123; printf("Content-type:text/html\n\n"); printf("&lt;html&gt;\n"); printf("&lt;head&gt;&lt;title&gt;cgiCHello.c&lt;/title&gt;&lt;/head&gt;\n"); printf("&lt;body&gt;\n"); printf("&lt;h1&gt;Hello World! &lt;font color=\"blue\"&gt;\"CGI C\"&lt;/font&gt; &lt;/h1&gt;\n"); printf("&lt;/body&gt;\n"); printf("&lt;/html&gt;\n"); return 0; &#125; 编写完成后将文本文档命名为：hello.c。然后再对其进行编译，使之成为一个cgi文件： arm-linux-gnueabihf-gcc -o hello.cgi hello.c 安装交叉编译器 这里才发现自己的ubuntu没有安装交叉编译器，先在arm-linux-gnueabihf官网 下载压缩包 (1) 拷贝gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf.tar到ubuntu目录下 (2) 在/usr/local/下建立arm文件夹 mkdir /usr/local/arm (3) 进入gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf.tar所在的目录，将gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf.tar解压到/usr/local/arm/下 tar xvf -C/usr/local/arm/ (4) 添加环境变量 vim /etc/profile 在末尾添加 export PATH=$PATH:/usr/local/arm/gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf/bin (5) source /etc/profile 使新添加的环境变量生效 (6) 查看是否安装成功 终端输入arm-linux-gnueabihf-gcc -v出现一系列说明，末尾的版本号与安装版本相同则安装成功 代码的编辑编译可以在树莓派上进行，完全版系统镜像自带gcc gcc -o hello.cgi hello.c 在当前文件夹下便会生成hello.cgi，为这个文件添加权限，使其可执行： chmod +X hello.cgi 将这个文件移动到服务器中的文件夹： cp hello.cgi /www/cgi-bin/ 现在可以打开浏览器在地址栏中输入 板子ip/cgi-bin/hello.cgi 出现下图所示页面说明cgi功能可以使用，可以进行下一步工作了： 动态网页测试 # 实现嵌入式web远程控制功能 ​ 目前为止，服务器的搭建以及数据的传输等基本功能已经实现了，为了能够实现嵌入式web远程控制的功能，就需要让控制者进入到其主页来进行编辑提交，所以在这个页面中就要让控制者能够对目标板进行各种控制和修改，而html只是单方向的，不能进行信息的交互，这时候就需要cgi程序来完成交互的任务。 一、静态网页的配置服务器的文件结构：/www为服务器根目录，存放index.html是服务器的首页，cgi-bin文件夹存放各种cgi程序和sh脚本，下面每个编译好的.cgi和.sh文件都cp到这个目录下。 html文件的格式：编辑index.html，文件的内容如下： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;Hello&lt;/title&gt; &lt;script type="text/javascript"&gt; function MM_jumpMenu(targ,selObj,restore)&#123; //v3.0 eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'"); if (restore) selObj.selectedIndex=0; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;form id="form1" name="form1" method="get" action="/cgi-bin/reboot.cgi"&gt; &lt;input type="submit" value="重启"&gt; &lt;/form&gt; &lt;a href="http://192.168.43.133/cgi-bin/hello.cgi#tips" target="_blank"&gt;hello~&lt;/a&gt;&lt;pre&gt;&lt;form action="/cgi-bin/Changeip.cgi" method="post"&gt;&lt;input type="text" name="var_ip"&gt;&lt;input type="submit" &gt;&lt;/form&gt;&lt;/p&gt; &lt;/html&gt; 每个标记都是一一对应的。每个网页文件都是以开始和以结束。与之间的内容是网页的标题。会显示在浏览器的标题栏上。与之间放的是网页内容。 显示出的效果如下： index.html `&nbsp;` 语句能够实现空行功能，以便使网页整体结构不会过于紧凑， `hello~` 该语句表示了在网页中加入一个超链接，该链接指向http://192.168.43.133/cgi-bin/hello.cgi 显示为hello用于测试服务器的cgi功能。 点击hello~之后服务器跳转，页面显示的内容： 超链接hello.cgi ## 二、动态网页的配置 1 HTML表单1234&lt;form action="/cgi-bin/Changeip.cgi" method="post"&gt; /表单动作指向Changeip.cgi 传送方式为post&lt;input type="text" name="var_ip"&gt; /插入文本框，赋值名为var_ip&lt;input type="submit" &gt; /插入提交按钮 &lt;/form&gt; /表单结束 上面的语句表示了以post的方式将表单内容发送给Changeip.cgi，同时定义了一个按键和一个输入文本框，按钮的属性为提交按钮，文本框内的值为var_ip的值。 2 cgi功能的实现​ 为了能够实现更改ip的的功能就需要写一个shell脚本调用配置文件并对其进行修改，然而修改这个文件需要root权限，可是单单给shell脚本加上权限并不能达到目的，这时就需要借用一个c程序来提升其权限： Changeip.c: 12345678910111213141516#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;int main()&#123; printf("Content-type: text/html\n\n"); //输出类型 uid_t uid ,euid; uid = getuid() ; euid = geteuid(); if(setreuid(euid, uid)) perror("setreuid"); //交换这两个id system("/www/cgi-bin/Changeip.sh"); //调用程序 return 0;&#125; 这个c程序所做的便是提升changip.sh脚本的权限。当在网页中输入一个ip地址后，进入changip.sh 将通过awk截取变量$f 以-为分隔符的第二个域($2)的值，并赋值给var_ip这个变量： 1var_ip=`echo $QUERY_STRING | awk -F '&amp;' '&#123;print $1&#125;' | awk -F '=' '&#123;print $2&#125;'` 因为采用wlan连接，设置静态ip地址不是在interfaces里，而是在/etc/dhcpcd.conf中更改。 将得到的var_ip这个值写入/etc/dhcpcd.conf： 123eth0_cfg="/etc/dhcpcd.conf"sed -i '/^static ip_address=/d' $eth0_cfg #删除匹配到ip的行echo "static ip_address=$var_ip/24" &gt;&gt; $eth0_cfg 这样就完成了ip的更改 Changip.sh: 12345678910111213#!/bin/bashif [ $REQUEST_METHOD = "POST" ]; then QUERY_STRING=`cat /dev/stdin`fiecho "Content-type:text/html"echo ""eth0_cfg="/etc/dhcpcd.conf"var_ip=`echo $QUERY_STRING | awk -F '&amp;' '&#123;print $1&#125;' | awk -F '=' '&#123;print $2&#125;'`sed -i '/^static ip_address=/d' $eth0_cfgecho "static ip_address=$var_ip/24" &gt;&gt; $eth0_cfg 使开发板重启功能也是通过cgi调用sh脚本实现。 仿照Changeip编写如下代码： reboot.c: 1234567891011121314151617181920212223#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;int main()&#123; printf("Content-type: text/html\n\n"); printf("&lt;html&gt;\n"); printf("&lt;head&gt;&lt;title&gt;reboot&lt;/title&gt;&lt;/head&gt;\n"); printf("&lt;body&gt;\n"); printf("&lt;h1&gt;The system is going to reboot .......\n\n &lt;/h1&gt;\n"); printf("&lt;/body&gt;\n"); printf("&lt;/html&gt;\n"); uid_t uid ,euid; uid = getuid() ; euid = geteuid(); if(setreuid(euid, uid)) perror("setreuid"); system("/www/cgi-bin/reboot.sh"); return 0;&#125; reboot.sh: 1234#!/bin/bashecho "Content-type:text/html"echo "系统将要重启！"/sbin/shutdown -r now 经过后面的测试shell脚本可以使用，前提是需要使用命令chmod 777 reboot.sh改变其权限。 (这里修改为u+s无效，待+6解) 编译Change.c和reboot.c，将.cgi和.sh文件都cp到/www/cgi-bin下 三、测试远程控制功能1.查看boa服务boa配置好后一般随开机启动 ps -aux | grep boa可以查看boa的进程号，kill进程号关闭，boa命令重启。 启动boa服务器 在主机浏览器地址栏内输入开发板服务器的ip（192.168.43.133）这样就进入了服务器的主页，主页的内容很直接，两个按钮，一个超链接，一个文本框： boa服务器主页 2.测试修改ip首先设置板子的静态ip vim /etc/dhcpcd.conf 在文件末尾添加静态地址配置 1234interface wlan0static routers=192.168.1.1static domain_name_servers=114.114.114.114 8.8.8.8static ip_address=192.168.43.133/24 重启wifi网卡 wpa_cli -i wlan0 reconfigure 查看开发板当前ip地址，输入ifconfig wlan0或ip addr show wlan0命令后可以看到板子当前的连接，硬件地址，ipv4和ipv6地址，广播地址，以及子网掩码等。 当前ip地址 在网页文本框输入想要修改的ip地址点击提交，正常弹出网页后ifconfig wlan0查看板子ip，这时并没有更改，查看dhcpcd.conf文件，发现已经修改成功，因为更改conf文件后要再次重启wifi网卡，发现远程登陆断开，以新ip登陆，这时查看ip已经改变为刚才输入的地址了。 3.测试重启功能在网页上点击重启按钮，弹出窗口，远程连接断开，板子灯表示正在重启，等待一会恢复连接。 总结​ 通过这次课设第一次搭建服务器，了解服务器文件的结构和运行方式，学到了更多linux下的命令，遇到问题多查官方文档和其他个人博客，踩到的雷前人一般都有解决方法。对于boa和cgi程序有了初步了解，尤其是权限问题，cgi和sh脚本经常提高权限才能正常运行。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>boa</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识树莓派记录]]></title>
    <url>%2F2020%2F04%2F16%2F%E5%88%9D%E8%AF%86%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[初识树莓派记录​ 这个学期有一个智能硬件系统开发综合实践，从暑假看到树莓派4发布就想搞一个玩，这次正好有机会就买了一个，淘宝购入2g无卡版，包含板子、第三方5V3A电源、外壳和一根micro-HDMI转HDMI线。另配一张64g存储卡。 一、开箱贴散热片，按照卖家给的教程安装外壳，烧系统，添加SSH和WiFi配置文件，putty登录开启VNC，设置分辨率，否则无法连接VNC，通过路由器后台查看板子IP，VNC Viewer登录进图形界面。卖家提供的资料如下 树莓派4B带风扇外壳安装视频链接：https://pan.baidu.com/s/1iowbKNnrdztEK2sj562peA 提取码：pshs 树莓派4系统烧入及WIFI配置方法说明： https://pan.baidu.com/s/1knP0QzTLYMBvj_bLE7M1Eg 提取码：38ta 二、初始配置安装的系统是基于Debian的树莓派官方系统，Linux常用命令通用，注意用户权限。 1. 更换国内镜像默认镜像源在国外，安装软件下载很慢，经常碰到ip超时，一查是伦敦的ip，换到国内（这里采用清华大学的源）就好很多。 1.1. 编辑sources.list 打开终端 输入 sudo nano /etc/apt/sources.list 用#注释或直接删除原有的内容，新增两条： 12deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi#deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi ctrl+x 保存并退出。 1.2编辑raspi.listsudo nano /etc/apt/sources.list.d/raspi.list 用#注释或直接删除原有的内容，新增两条： 12deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main uideb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui ctrl+x 保存并退出。 更新软件源列表：sudo apt-get update 2. 重新安装vim树莓派自带的vim很不好用，卸掉重装 12sudo apt-get remove vim-commonsudo apt-get install vim 安装成功后可以添加一些功能 sudo vi /etc/vim/vimrc 在文件尾部加入 123set nu #显示行号syntax on #语法高亮set tabstop=4 #tab退四格 这里加注释会使每次打开vim报警告，不用写。vim的复制粘贴为y和p，在命令模式下选中待操作文本按y即复制，p即粘贴。 3.安装中文输入法sudo apt-get install scim-pinyin]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机不能复制粘贴]]></title>
    <url>%2F2020%2F04%2F16%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8D%E8%83%BD%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%2F</url>
    <content type="text"><![CDATA[虚拟机不能复制粘贴经检查是VM tools的问题，右键虚拟机看到安装VM tools 按钮是灰色的，要在虚拟机设置里把CD/DVD CD/DVD(2)和软盘设为自动检测 重启虚拟机 这时可以点安装VM tools，点击后会在桌面产生一个光盘镜像，点击后把安装包复制到home目录下 解压安装文件tar - -zxvf 进入目录cd vmware-tools-distrib 执行安装./vmware-install.pl 重启虚拟机，可以互相复制粘贴]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F12%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于博客的基础美化]]></title>
    <url>%2F2019%2F06%2F20%2F%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[关于博客的基础美化(next) 一、基础配置 二、主题配置 1.安装主题 2.遇到的问题 1. 创建“分类”页面 2. 创建“标签”页面 3. 文章首页摘要添加图片 4.TOC 5.网页背景图的设置 6. 添加音乐播放器 关于博客的基础美化(next)一、基础配置博客根目录下_config.yml文件包含博客全局的基础配置 12345678# Sitetitle: 王秋霖的博客 # 站点标题subtitle: # 站点副标题description: 这是一个博客 # 站点描述keywords: #关键字author: 王秋霖 # 作者language: zh-CN # 语言，官方不再支持zh-Hans，而是统一采用了zh-CNtimezone: # 时区——默认是本地时区 注意修改每项参数时:后都要加空格否则会报错。 下面可以配置主题和部署的站点： 12345678910## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-next-master# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/286259788/286259788-github.io.git branch: master 二、主题配置hexo本身提供了很多现成的主题，试过几个选用了比较有名的next主题，经过频繁试错大致完成，记录一些踩到的坑。 1.安装主题从git上下载到的压缩包解压到themes文件夹下，修改上图中的主题。hexo s 后发现初始的next主题很简单，需要逐渐添加功能。打开\themes\hexo-theme-next-master\下的_config.yml(主题配置文件)，其中有非常多的功能，逐行理解。注意修改配置文件或博文并保存后刷新 http://localhost:4000 即可看到更改，无需停止重启。 2.遇到的问题修改过程中如果出错命令行中会有提示，所以要改几步看一下命令行，下面写一下印象比较深的坑。 1. 创建“分类”页面 新建分类页面 1hexo new page categories 给分类页面添加类型 我们在source文件夹中的categories文件夹下找到index.md文件，并在它的头部加上type属性。 12345---title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot; #这部分是新添加的--- 给模板添加分类属性 现在我们打开scarffolds文件夹里的post.md文件，给它的头部加上categories:，这样我们创建的所有新的文章都会自带这个属性，我们只需要往里填分类，就可以自动在网站上形成分类了。 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags: 给文章添加分类 现在我们可以找到一篇文章，然后尝试给它添加分类 123456title: 尝试做博客+Markdown语法简记date: 2019-06-19 22:09:31categories: 记录tags: - md- 博客 2. 创建“标签”页面创建”标签”页的方式和创建“分类”一样。 新建“标签”页面 1hexo new page tags 给标签页面添加类型 我们在source文件夹中的tags文件夹下找到index.md文件，并在它的头部加上type属性。 123title: tagsdate: 2018-08-06 22:48:29type: &quot;tags&quot; #新添加的内容 给文章添加标签 有两种写法都可以，第一种是类似数组的写法，把标签放在中括号[]里，用英文逗号隔开 1234title: 尝试做博客+Markdown语法简记date: 2019-06-19 22:09:31categories: 记录tags: [md,博客] 第二种写法是用-短划线列出来 123456title: 尝试做博客+Markdown语法简记date: 2019-06-19 22:09:31categories: 记录tags: - md- 博客 这两项主要总忘在参数前加括号导致报错。 3. 文章首页摘要添加图片只要在博文的头中添加phtos属性即可，如下图 12345678title: 尝试做博客+Markdown语法简记date: 2019-06-19 22:09:31categories: 记录tags: - md- 博客photos: - &quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=567142806,2737706881&amp;fm=11&amp;gp=0.jpg&quot; 4.TOC文章支持Toc，修改下面enable为true即可。 1234567891011toc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: false # Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter. max_depth: 6 注意要使用&lt;!-- toc --&gt; 这种格式，不支持[TOC] 5.网页背景图的设置修改themes\next\source\css\ _custom\custom.styl文件，这个是Next留给用户个性化定制样式的文件，添加以下代码：这里采用了一个图网提供的api接口。 1234567891011121314151617181920// Custom styles.// 添加背景图片body &#123; background: url(https://source.unsplash.com/random/1600x900?wallpapers); background-size: cover; background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;&#125;// 修改主体透明度.main-inner &#123; background: #fff; opacity: 0.8;&#125;// 修改菜单栏透明度.header-inner &#123; opacity: 1;&#125; 这里修改菜单栏透明度不为 1 会使搜索栏变得非常透明，目前未解决，只能设成 1 。 6. 添加音乐播放器使用网易云音乐网页版“生成外链播放器”，复制iframe插件的代码，分成两部分，插入到/layout/_macro/ sidebar.swig文件中,可以选择自己想要的位置和长宽等属性，这里选择在侧边栏social函数后也就是社交网站图标下方。 12345&#123;% if theme.background_music %&#125; &lt;div&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="210" height="110" src="&#123;&#123; theme.background_music &#125;&#125;"&gt;&lt;/iframe&gt; &lt;/div&gt;&#123;% endif %&#125; 在主题配置文件中添加background_music,位置随意。把歌单链接放在这，以后可以在这简单的改歌单的地址。 1background_music: //music.163.com/outchain/player?type=0&amp;id=768509742&amp;auto=1&amp;height=66 更新：网易云歌单现在只能完全免费的歌曲才能生成外链，审查元素那招已经无效。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尝试做博客+Markdown语法简记]]></title>
    <url>%2F2019%2F06%2F19%2F%E5%B0%9D%E8%AF%95%E5%81%9A%E5%8D%9A%E5%AE%A2%2BMarkdown%E8%AF%AD%E6%B3%95%E7%AE%80%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[基于hexo搭建静态博客​ 今天参考codesheep在b站的视频手把手教你从0开始搭建自己的个人博客尝试搭建博客，安装hexo、node.js和Typora等工具。接触了新的文本编辑方式markdown格式。视频讲的很清楚，这里不再赘述。中间遇到的卡顿多是命令没输对。最后deploy到github上的时候把 . 写成了 - 导致无法访问查了很久。刚搭建好的博客很简陋，以后慢慢美化，有一个问题是”引用“的格式在默认主题下会显示错误，更换主题后显示正常。 ​ 学习了github的一个新用法，这不只是一个代码存储仓库，功能很强大。 Markdown语法写博客等需要用markdown(后缀.md)格式。不用考虑排版问题，可以专注于文章内容本身，跨平台兼容性良好。由于图片等格式都是以文字代码方式保存，文件体积小巧，之前看到过没有深入了解可惜了。下面测试一些基础用法，搬运自简书的一篇文章 一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 二、字体语法： 1234要加粗的文字左右分别用两个*号包起来要倾斜的文字左右分别用一个*号包起来要倾斜和加粗的文字左右分别用三个*号包起来要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…貌似可以一直加下去，但没神马卵用 示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 四、分割线三个或者三个以上的 - 或者 * 都可以。 示例： 1234-------******** 效果如下：可以看到，显示效果是一样的。 五、图片语法： 1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 1![cytus2✖Miku](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1560956929&amp;di=75fa9c14fa24a75ba0c53d786073070d&amp;src=http://wx3.sinaimg.cn/orj360/8900556dly1g220fr8y9fj21fu11q4qq.jpg) 效果如下： 上传本地图片直接点击导航栏的图片标志，选择图片即可 六、超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 示例： 12[简书](http://jianshu.com)[百度](http://baidu.com) 效果如下： 简书百度 注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。 1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 七、列表无序列表语法：无序列表用 - + * 任何一种都可以 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 八、表格语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 九、代码语法： 单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 1`create database hero;` 代码块 123456(```) function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();(```) 效果如下： 单行代码 1create database hero; 代码块 1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); 十、流程图123456789​```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp; 123456789101112效果如下：```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp; 作者：高鸿祥 链接：&lt;https://www.jianshu.com/p/191d1e21f7ed&gt; 来源：简书]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>md</tag>
      </tags>
  </entry>
</search>
